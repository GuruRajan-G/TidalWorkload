CLS
$session = New-Object Microsoft.PowerShell.Commands.WebRequestSession
$apiurl="https://tidalplat.internal.das/api/tes-6.5/postbody"
$GFolderLevel="43"
$GAPMNUMBER="APM1000105"
$Gpattern="*1000105*"
$GEnvironment="PLAT"

function Cleanup{
Write-Host "Started Clean-up Old Logs from the Folder"
Remove-Item C:\Users\AL91261\TidalAutomation\FileDependencySource\*.xml*
Remove-Item C:\Users\AL91261\TidalAutomation\JobDependencySource\*.xml*
Remove-Item C:\Users\AL91261\TidalAutomation\JobDefinitionSource\*.xml*
Remove-Item C:\Users\AL91261\TidalAutomation\UpdateJobDefinition\*.xml*
Remove-Item C:\Users\AL91261\TidalAutomation\UpdateJobDependency\*.xml*
Remove-Item C:\Users\AL91261\TidalAutomation\UpdateFileDependency\*.xml*
Remove-Item C:\Users\AL91261\TidalAutomation\MappingExcel\*.xlsx*
Write-Host "Completed Clean-up Old Logs from the Folder"
}

function Get-Headers{
$username = "xxxx"
$password = "xxxx"
$encodedCredentials = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes("$($username):$($password)"))
$headers = @{
    Authorization = "Basic $encodedCredentials"
    "Content-Type" = "application/xml"
    "User-Agent"="PostmanRuntime/7.29.4"}
return $headers
}

function JobDefinition($GroupID,$GroupTitle){
$Jobarray=@()
Write-Host "Started Extraction of Job_Definition for Job ID:$GroupID and Title:$GroupTitle"
Invoke-JobGet $GroupID $GroupTitle
#UpdateJobDefinitionXML $GroupTitle
$Jobarray +=PrepareExcel $GroupTitle
Write-Host "Completed Extraction of Job_Definition for Job ID:$GroupID and Title:$GroupTitle"
return $Jobarray
}

function FileDependencyDefinition($JobDepID,$JobDepTitle){
Write-Host "Started Extraction of FileDependency for Job ID:$JobDepID and Title:$JobDepTitle"
$Response=Invoke-JobGetFileDependencyIDS $JobDepID $JobDepTitle
$Deparray=@()
if($Response.id)
{
Write-Host "entered into if block of filedependency"
foreach ($Dependencyitem in $Response)
{
$Dependencyitemid=$Dependencyitem.id
$Dependencyitemtitle=$Dependencyitem.title
#Write-Host $Dependencyitemid
#Write-Host $Dependencyitemtitle
$Dependencyfilename=Invoke-JobFileDependency $Dependencyitemid $JobDepTitle
#UpdateFileDependecyXML $Dependencyfilename
$Deparray +=PrepareFileDependencyExcel $Dependencyfilename $TRUE
}
Write-Host "Completed Extraction of FileDependency for Job ID:$GroupID and Title:$GroupTitle"
return $Deparray
}
elseif($Response.entry.id)
{
Write-Host "entered into entry block of filedependency"
foreach ($Dependencyitem in $Response.entry)
{
$Dependencyitemid=$Dependencyitem.id
$Dependencyitemtitle=$Dependencyitem.title
#Write-Host $Dependencyitemid
#Write-Host $Dependencyitemtitle
$Dependencyfilename=Invoke-JobFileDependency $Dependencyitemid $JobDepTitle
#UpdateFileDependecyXML $Dependencyfilename
$Deparray +=PrepareFileDependencyExcel $Dependencyfilename $TRUE
}
Write-Host "Completed Extraction of FileDependency for Job ID:$GroupID and Title:$GroupTitle"
return $Deparray
}
else
{
$Deparray +=PrepareFileDependencyExcel $JobDepTitle $FALSE
Write-Host "No File Dependency for Job_ID: $JobDepID and Job_Name:$JobDepTitle"
return $Deparray
}
}

function DependencyDefinition($JobDepID,$JobDepTitle){
Write-Host "Started Extraction of Job_Dependency for Job ID:$JobDepID and Title:$JobDepTitle"
$Response=Invoke-JobGetDependencyIDS $JobDepID $JobDepTitle
$Deparray=@()
if($Response.id)
{
Write-Host "entered into if block of Jobdependency"
foreach ($Dependencyitem in $Response)
{
$Dependencyitemid=$Dependencyitem.id
$Dependencyitemtitle=$Dependencyitem.title
Write-Host $Dependencyitemid
Write-Host $Dependencyitemtitle
$Dependencyfilename=Invoke-JobDependency $Dependencyitemid $Dependencyitemtitle
#UpdateJobDependecyXML $Dependencyfilename
$Deparray +=PrepareDependencyExcel $Dependencyfilename $TRUE
}
Write-Host "Completed Extraction of Job_Dependency for Job ID:$GroupID and Title:$GroupTitle"
return $Deparray
}
elseif($Response.entry.id)
{
Write-Host "entered into entry block of Jobdependency"
foreach ($Dependencyitem in $Response.entry)
{
$Dependencyitemid=$Dependencyitem.id
$Dependencyitemtitle=$Dependencyitem.title
#Write-Host $Dependencyitemid
#Write-Host $Dependencyitemtitle
$Dependencyfilename=Invoke-JobDependency $Dependencyitemid $Dependencyitemtitle
#UpdateJobDependecyXML $Dependencyfilename
$Deparray +=PrepareDependencyExcel $Dependencyfilename $TRUE
}
Write-Host "Completed Extraction of Job_Dependency for Job ID:$GroupID and Title:$GroupTitle"
return $Deparray
}
else
{
$Deparray +=PrepareDependencyExcel $JobDepTitle $FALSE
Write-Host "No Dependency for Job_ID: $JobDepID and Job_Name:$JobDepTitle"
return $Deparray
}
}

function Invoke-JobGetIDs($JobGetIDS_Param){
$url = $apiurl
$Requestheaders= Get-Headers
$Requestbody=@"
<?xml version="1.0" encoding="UTF-8" ?>
<entry xmlns="http://purl.org/atom/ns#">
    <tes:Job.getIds xmlns:tes="http://www.tidalsoftware.com/client/tesservlet">
        <queryCondition>parentid=$JobGetIDS_Param</queryCondition>
    </tes:Job.getIds>
</entry>
"@
Write-Host "Invoke JobGetIDs API Request for ID: $JobGetIDS_Param Started"
$Response = Invoke-RestMethod -Uri $url -Method POST -Headers $Requestheaders -Body $Requestbody -WebSession $session
Write-Host "Invoke JobGetIDs API Request for ID: $JobGetIDS_Param Completed"
return $Response
}

function Invoke-JobGet($JobGet_ID,$JobGet_Title){
$url = $apiurl
$Requestheaders= Get-Headers
$Requestbody=@"
<?xml version="1.0" encoding="UTF-8" ?>
<entry xmlns="http://purl.org/atom/ns#">
    <tes:Job.get xmlns:tes="http://www.tidalsoftware.com/client/tesservlet">
        <id>$JobGet_ID</id>
    </tes:Job.get>
</entry>
"@
Write-Host "Invoke JobGet API Request for Job_ID: $JobGet_ID and Job_Name:$JobGet_Title Started"
$Response = Invoke-WebRequest -Uri $url -Method POST -Headers $Requestheaders -Body $Requestbody -WebSession $session
Write-Host "Invoke JobGet API Request for Job_ID: $JobGet_ID and Job_Name:$JobGet_Title Completed"
$Response.Content | Out-File -FilePath C:\Users\AL91261\TidalAutomation\JobDefinitionSource\$JobGet_Title.xml  -Encoding utf8
Write-Host "Out-File opertaion for Job_ID: $JobGet_ID and Job_Name:$JobGet_Title Completed and Response available in JobDefinitionSource Folder"
}

function Invoke-JobGetDependencyIDS($JobDepID,$JobDepTitle){
$url = $apiurl
$Requestheaders= Get-Headers
$Requestbody=@"
<?xml version="1.0" encoding="UTF-8" ?>
<entry xmlns="http://purl.org/atom/ns#">
	<tes:JobDependency.getIds xmlns:tes="http://www.tidalsoftware.com/client/tesservlet">
		<queryCondition>jobid=$JobDepID</queryCondition>
	</tes:JobDependency.getIds>
</entry>
"@
Write-Host "Invoke JobDependency-GetIDS API Request for Job_ID: $JobDepID and Job_Name:$JobDepTitle Started"
#write-host $Requestbody
$Response = Invoke-RestMethod -Uri $url -Method POST -Headers $Requestheaders -Body $Requestbody -WebSession $session
Write-Host "Invoke JobDependency-GetIDS API Request for Job_ID: $JobDepID and Job_Name:$JobDepTitle Completed"
write-host $Response.entry.id
return $Response
}

function Invoke-JobDependency($Dependencyid,$Dependencytitle){
$url = $apiurl
$Requestheaders= Get-Headers
$Requestbody=@"
<?xml version="1.0" encoding="UTF-8" ?>
<entry xmlns="http://purl.org/atom/ns#">
	<tes:JobDependency.get xmlns:tes="http://www.tidalsoftware.com/client/tesservlet">
		<id>$Dependencyid</id>
	</tes:JobDependency.get>
</entry>
"@
Write-Host "Invoke JobDependency API Request for Dependency_ID: $Dependencyid and Job_Name:$Dependencytitle Started"
$Response = Invoke-WebRequest -Uri $url -Method POST -Headers $Requestheaders -Body $Requestbody -WebSession $session
Write-Host "Invoke JobDependency API Request for Dependency_ID: $Dependencyid and Job_Name:$Dependencytitle Completed"
$Dependencyefilename=$Dependencyid+"_"+$Dependencytitle
$Response.Content | Out-File -FilePath C:\Users\AL91261\TidalAutomation\JobDependencySource\$Dependencyefilename.xml -Encoding utf8
Write-Host "Out-File opertaion for DependencyID:$Dependencyid and Job_Name:$Dependencytitle Completed and Response available in JobDependencySource Folder"
return $Dependencyefilename
}

function Invoke-JobGetFileDependencyIDS($JobDepID,$JobDepTitle){
$url = $apiurl
$Requestheaders= Get-Headers
$Requestbody=@"
<?xml version="1.0" encoding="UTF-8" ?>
<entry xmlns="http://purl.org/atom/ns#">
	<tes:FileDependency.getIds xmlns:tes="http://www.tidalsoftware.com/client/tesservlet">
		<queryCondition>jobid=$JobDepID</queryCondition>
	</tes:FileDependency.getIds>
</entry>
"@
Write-Host "Invoke Job FileDependency-GetIDS API Request for Job_ID: $JobDepID and Job_Name:$JobDepTitle Started"
$Response = Invoke-RestMethod -Uri $url -Method POST -Headers $Requestheaders -Body $Requestbody -WebSession $session
Write-Host "Invoke Job FileDependency-GetIDS API Request for Job_ID: $JobDepID and Job_Name:$JobDepTitle Completed"
return $Response
}

function Invoke-JobFileDependency($Dependencyid,$Dependencytitle){
$url = $apiurl
$Requestheaders= Get-Headers
$Requestbody=@"
<?xml version="1.0" encoding="UTF-8" ?>
<entry xmlns="http://purl.org/atom/ns#">
	<tes:FileDependency.get xmlns:tes="http://www.tidalsoftware.com/client/tesservlet">
		<id>$Dependencyid</id>
	</tes:FileDependency.get>
</entry>
"@
Write-Host "Invoke JobFileDependency API Request for Dependency_ID: $Dependencyid and Job_Name:$Dependencytitle Started"
$Response = Invoke-WebRequest -Uri $url -Method POST -Headers $Requestheaders -Body $Requestbody -WebSession $session
Write-Host "Invoke JobFileDependency API Request for Dependency_ID: $Dependencyid and Job_Name:$Dependencytitle Completed"
$Dependencyefilename=$Dependencyid+"_"+$Dependencytitle
$Response.Content | Out-File -FilePath C:\Users\AL91261\TidalAutomation\FileDependencySource\$Dependencyefilename.xml -Encoding utf8
Write-Host "Out-File opertaion for FileDependencyID:$Dependencyid and Job_Name:$Dependencytitle Completed and Response available in FileDependencySource Folder"
return $Dependencyefilename
}

function UpdateJobDefinitionXML($JobTitle){
Write-Host "Update Tag Manipulation Started for Job Definition $JobTitle"
[xml]$xml=Get-Content -Path C:\Users\AL91261\TidalAutomation\JobDefinitionSource\$JobTitle.xml -Raw
[xml]$final =$xml.GetElementsByTagName("entry")[0].OuterXml 
$output=$final.GetElementsByTagName("tes:job")[0].OuterXml 
$XMLheaders=Get-Content -Path "C:\Users\AL91261\TidalAutomation\PowerShellscripts\Headerfooter\Header.txt"
$XMLfooters=Get-Content -Path "C:\Users\AL91261\TidalAutomation\PowerShellscripts\Headerfooter\Footer.txt"
$UpdateXML=$XMLheaders+$output+$XMLfooters
$UpdateXML | Out-File C:\Users\AL91261\TidalAutomation\UpdateJobDefinition\$JobTitle.xml
Write-Host "Update Tag Manipulation Completed for Job Definition $JobTitle and available in UpdateJobDefinition Folder"
}

function UpdateJobDependecyXML($JobDepTitle){
Write-Host "Update Tag Manipulation Started for Job Dependency $JobDepTitle"
[xml]$JobDependencyxml=Get-Content -Path C:\Users\AL91261\TidalAutomation\JobDependencySource\$JobDepTitle.xml -Raw
$elements="Default"
$depjobid=$null
$elements=$JobDependencyxml.GetElementsByTagName("tes:message").InnerXml
$message="JobDependency: Record [null] not found."
$depjobid=$JobDependencyxml.GetElementsByTagName("tes:depjobid").InnerXml
if ($elements -ne $message -and $depjobid -ne $null )
{
[xml]$JobDependencyentry =$JobDependencyxml.GetElementsByTagName("entry")[0].OuterXml 
$JobDependencyContent=$JobDependencyentry.GetElementsByTagName("tes:jobdependency")[0].OuterXml 
$JobDependencyheaders=Get-Content -Path "C:\Users\AL91261\TidalAutomation\PowerShellscripts\Headerfooter\DependencyHeader.txt"
$JobDependencyfooters=Get-Content -Path "C:\Users\AL91261\TidalAutomation\PowerShellscripts\Headerfooter\DependencyFooter.txt"
$UpdateXML=$JobDependencyheaders+$JobDependencyContent+$JobDependencyfooters
$UpdateXML | Out-File C:\Users\AL91261\TidalAutomation\UpdateJobDependency\$JobDepTitle.xml
Write-Host "Update Tag Manipulation Completed for Job Dependency $JobDepTitle and available in UpdateJobDependency Folder"
}
else
{
Write-Host "No Depenendy available for Job Definition $JobDepTitle"
}
}

function UpdateFileDependecyXML($JobDepTitle){
Write-Host "Update Tag Manipulation Started for Job File Dependency $JobDepTitle"
[xml]$JobDependencyxml=Get-Content -Path C:\Users\AL91261\TidalAutomation\FileDependencySource\$JobDepTitle.xml -Raw
$elements="Default"
$depjobid=$null
$elements=$JobDependencyxml.GetElementsByTagName("tes:message").InnerXml
$message="FileDependency: Record [null] not found."
$depjobid=$JobDependencyxml.GetElementsByTagName("tes:depjobid").InnerXml
if ($elements -ne $message -and $depjobid -ne $null )
{
[xml]$JobDependencyentry =$JobDependencyxml.GetElementsByTagName("entry")[0].OuterXml 
$JobDependencyContent=$JobDependencyentry.GetElementsByTagName("tes:filedependency")[0].OuterXml 
$JobDependencyheaders=Get-Content -Path "C:\Users\AL91261\TidalAutomation\PowerShellscripts\Headerfooter\FileDependencyHeader.txt"
$JobDependencyfooters=Get-Content -Path "C:\Users\AL91261\TidalAutomation\PowerShellscripts\Headerfooter\FileDependencyFooter.txt"
$UpdateXML=$JobDependencyheaders+$JobDependencyContent+$JobDependencyfooters
$UpdateXML | Out-File C:\Users\AL91261\TidalAutomation\UpdateFileDependency\$JobDepTitle.xml
Write-Host "Update Tag Manipulation Completed for Job File Dependency $JobDepTitle and available in UpdateFileDependency Folder"
}
else
{
Write-Host "No FileDepenendy available for Job Definition $JobDepTitle"
}
}

function PrepareExcel($ExcelTitle){
Write-Host "Started Appending row in JobExtract for $ExcelTitle"
#$defnitiontag=[xml]([System.IO.File]::ReadAllText(".\TidalAutomation\UpdateJobDefinition\$ExcelTitle.xml"))
$defnitiontag=[xml]([System.IO.File]::ReadAllText("C:\Users\AL91261\TidalAutomation\JobDefinitionSource\$ExcelTitle.xml"))
$id=$defnitiontag.GetElementsByTagName("tes:id").InnerXml
$type=$defnitiontag.GetElementsByTagName("tes:type").InnerXml
$typename=$defnitiontag.GetElementsByTagName("tes:typename").InnerXml
$name=$defnitiontag.GetElementsByTagName("tes:name").InnerXml
$parentid=$defnitiontag.GetElementsByTagName("tes:parentid").InnerXml
$parentname=$defnitiontag.GetElementsByTagName("tes:parentname").InnerXml
$active=$defnitiontag.GetElementsByTagName("tes:active").InnerXml
$effectivecalendarid=$defnitiontag.GetElementsByTagName("tes:effectivecalendarid").InnerXml
$ownerid=$defnitiontag.GetElementsByTagName("tes:ownerid").InnerXml
$ownername=$defnitiontag.GetElementsByTagName("tes:ownername").InnerXml
$lastusermodifiedtime=$defnitiontag.GetElementsByTagName("tes:lastusermodifiedtime").InnerXml
$lastusermodifiedtimeasstring=$defnitiontag.GetElementsByTagName("tes:lastusermodifiedtimeasstring").InnerXml
$alias=$defnitiontag.GetElementsByTagName("tes:alias").InnerXml
$dirty=$defnitiontag.GetElementsByTagName("tes:dirty").InnerXml
$extendedinfo=$defnitiontag.GetElementsByTagName("tes:extendedinfo").InnerXml
$successorsvalue=$defnitiontag.GetElementsByTagName("tes:successorsvalue").InnerXml
$predecessorsvalue=$defnitiontag.GetElementsByTagName("tes:predecessorsvalue").InnerXml
$runtimeusername=$defnitiontag.GetElementsByTagName("tes:runtimeusername").InnerXml
$timewindowfromtime=$defnitiontag.GetElementsByTagName("tes:timewindowfromtime").InnerXml
$timewindowfromtimeasstring=$defnitiontag.GetElementsByTagName("tes:timewindowfromtimeasstring").InnerXml
$timewindowuntiltime=$defnitiontag.GetElementsByTagName("tes:timewindowuntiltime").InnerXml
$timewindowuntiltimeasstring=$defnitiontag.GetElementsByTagName("tes:timewindowuntiltimeasstring").InnerXml
$breachoffset=$defnitiontag.GetElementsByTagName("tes:breachoffset").InnerXml
$riskoffset=$defnitiontag.GetElementsByTagName("tes:riskoffset").InnerXml
$critical=$defnitiontag.GetElementsByTagName("tes:critical").InnerXml
$childrencount=$defnitiontag.GetElementsByTagName("tes:childrencount").InnerXml
$agentid=$defnitiontag.GetElementsByTagName("tes:agentid").InnerXml
$effectiveagentid=$defnitiontag.GetElementsByTagName("tes:effectiveagentid").InnerXml
$effectiveagentlistid=$defnitiontag.GetElementsByTagName("tes:effectiveagentlistid").InnerXml
$agentname=$defnitiontag.GetElementsByTagName("tes:agentname").InnerXml
$agenttype=$defnitiontag.GetElementsByTagName("tes:agenttype").InnerXml
$agentostype=$defnitiontag.GetElementsByTagName("tes:agentostype").InnerXml
$domain=$defnitiontag.GetElementsByTagName("tes:domain").InnerXml
$allowunscheduled=$defnitiontag.GetElementsByTagName("tes:allowunscheduled").InnerXml
$inheritcalendar=$defnitiontag.GetElementsByTagName("tes:inheritcalendar").InnerXml
$inheritagent=$defnitiontag.GetElementsByTagName("tes:inheritagent").InnerXml
$inherittimewindow=$defnitiontag.GetElementsByTagName("tes:inherittimewindow").InnerXml
$parentactive=$defnitiontag.GetElementsByTagName("tes:parentactive").InnerXml
$timewindowoption=$defnitiontag.GetElementsByTagName("tes:timewindowoption").InnerXml
$command=$defnitiontag.GetElementsByTagName("tes:command").InnerXml
$allowrerun=$defnitiontag.GetElementsByTagName("tes:allowrerun").InnerXml
$calendaroffset=$defnitiontag.GetElementsByTagName("tes:calendaroffset").InnerXml
$concurrency=$defnitiontag.GetElementsByTagName("tes:concurrency").InnerXml
$createtime=$defnitiontag.GetElementsByTagName("tes:createtime").InnerXml
$dependencylogic=$defnitiontag.GetElementsByTagName("tes:dependencylogic").InnerXml
$compounddependencies=$defnitiontag.GetElementsByTagName("tes:compounddependencies").InnerXml
$disablecarryover=$defnitiontag.GetElementsByTagName("tes:disablecarryover").InnerXml
$durationestimated=$defnitiontag.GetElementsByTagName("tes:durationestimated").InnerXml
$durationmaximum=$defnitiontag.GetElementsByTagName("tes:durationmaximum").InnerXml
$durationminimum=$defnitiontag.GetElementsByTagName("tes:durationminimum").InnerXml
$estimatedmethod=$defnitiontag.GetElementsByTagName("tes:estimatedmethod").InnerXml
$excludeabnormalduration=$defnitiontag.GetElementsByTagName("tes:excludeabnormalduration").InnerXml
$exitcodenormaloperator=$defnitiontag.GetElementsByTagName("tes:exitcodenormaloperator").InnerXml
$fullpath=$defnitiontag.GetElementsByTagName("tes:fullpath").InnerXml
$historyretention=$defnitiontag.GetElementsByTagName("tes:historyretention").InnerXml
$inheritoptions=$defnitiontag.GetElementsByTagName("tes:inheritoptions").InnerXml
$inheritrepeat=$defnitiontag.GetElementsByTagName("tes:inheritrepeat").InnerXml
$isnotes=$defnitiontag.GetElementsByTagName("tes:isnotes").InnerXml
$isrunbook=$defnitiontag.GetElementsByTagName("tes:isrunbook").InnerXml
$jobdetailid=$defnitiontag.GetElementsByTagName("tes:jobdetailid").InnerXml
$lastchangetime=$defnitiontag.GetElementsByTagName("tes:lastchangetime").InnerXml
$nearoutage=$defnitiontag.GetElementsByTagName("tes:nearoutage").InnerXml
$normalexitfromrange=$defnitiontag.GetElementsByTagName("tes:normalexitfromrange").InnerXml
$normalexittorange=$defnitiontag.GetElementsByTagName("tes:normalexittorange").InnerXml
$parameters=$defnitiontag.GetElementsByTagName("tes:parameters").InnerXml
$priority=$defnitiontag.GetElementsByTagName("tes:priority").InnerXml
$repeat=$defnitiontag.GetElementsByTagName("tes:repeat").InnerXml
$rerundependency=$defnitiontag.GetElementsByTagName("tes:rerundependency").InnerXml
$forcererun=$defnitiontag.GetElementsByTagName("tes:forcererun").InnerXml
$saveoutputoption=$defnitiontag.GetElementsByTagName("tes:saveoutputoption").InnerXml
$trackingmethod=$defnitiontag.GetElementsByTagName("tes:trackingmethod").InnerXml
$waitOperator=$defnitiontag.GetElementsByTagName("tes:waitOperator").InnerXml
$waitoperator=$defnitiontag.GetElementsByTagName("tes:waitoperator").InnerXml
$runuserid=$defnitiontag.GetElementsByTagName("tes:runuserid").InnerXml
$workingdirectory=$defnitiontag.GetElementsByTagName("tes:workingdirectory").InnerXml
$notes=$defnitiontag.GetElementsByTagName("tes:notes").InnerXml
$concurrencytype=$defnitiontag.GetElementsByTagName("tes:concurrencytype").InnerXml
$tags=$defnitiontag.GetElementsByTagName("tes:tags").InnerXml
$sharedownerids=$defnitiontag.GetElementsByTagName("tes:sharedownerids").InnerXml
$sharedowners=$defnitiontag.GetElementsByTagName("tes:sharedowners").InnerXml
$terminateparentonerrorflag=$defnitiontag.GetElementsByTagName("tes:terminateparentonerrorflag").InnerXml
$terminateparentonabnormalflag=$defnitiontag.GetElementsByTagName("tes:terminateparentonabnormalflag").InnerXml
$terminateparentonabortflag=$defnitiontag.GetElementsByTagName("tes:terminateparentonabortflag").InnerXml
$onterminatereqignoreflag=$defnitiontag.GetElementsByTagName("tes:onterminatereqignoreflag").InnerXml
$onterminatereqabortactiveflag=$defnitiontag.GetElementsByTagName("tes:onterminatereqabortactiveflag").InnerXml
$onterminatereqterminateparentflag=$defnitiontag.GetElementsByTagName("tes:onterminatereqterminateparentflag").InnerXml
$unixprofile=$defnitiontag.GetElementsByTagName("tes:unixprofile").InnerXml
$transactionid=$defnitiontag.GetElementsByTagName("tes:transactionid").InnerXml
$data=$defnitiontag.GetElementsByTagName("tes:data").InnerXml
$arrayitem=[PSCustomObject]@{
id=$id
type=$type
typename=$typename
name=$name
parentid=$parentid
parentname=$parentname
active=$active
effectivecalendarid=$effectivecalendarid
ownerid=$ownerid
ownername=$ownername
lastusermodifiedtime=$lastusermodifiedtime
lastusermodifiedtimeasstring=$lastusermodifiedtimeasstring
alias=$alias
dirty=$dirty
extendedinfo=$extendedinfo
successorsvalue=$successorsvalue
predecessorsvalue=$predecessorsvalue
runtimeusername=$runtimeusername
timewindowfromtime=$timewindowfromtime
timewindowfromtimeasstring=$timewindowfromtimeasstring
timewindowuntiltime=$timewindowuntiltime
timewindowuntiltimeasstring=$timewindowuntiltimeasstring
breachoffset=$breachoffset
riskoffset=$riskoffset
critical=$critical
childrencount=$childrencount
agentid=$agentid
effectiveagentid=$effectiveagentid
effectiveagentlistid=$effectiveagentlistid
agentname=$agentname
agenttype=$agenttype
agentostype=$agentostype
domain=$domain
allowunscheduled=$allowunscheduled
inheritcalendar=$inheritcalendar
inheritagent=$inheritagent
inherittimewindow=$inherittimewindow
parentactive=$parentactive
timewindowoption=$timewindowoption
command=$command
allowrerun=$allowrerun
calendaroffset=$calendaroffset
concurrency=$concurrency
createtime=$createtime
dependencylogic=$dependencylogic
compounddependencies=$compounddependencies
disablecarryover=$disablecarryover
durationestimated=$durationestimated
durationmaximum=$durationmaximum
durationminimum=$durationminimum
estimatedmethod=$estimatedmethod
excludeabnormalduration=$excludeabnormalduration
exitcodenormaloperator=$exitcodenormaloperator
fullpath=$fullpath
historyretention=$historyretention
inheritoptions=$inheritoptions
inheritrepeat=$inheritrepeat
isnotes=$isnotes
isrunbook=$isrunbook
jobdetailid=$jobdetailid
lastchangetime=$lastchangetime
nearoutage=$nearoutage
normalexitfromrange=$normalexitfromrange
normalexittorange=$normalexittorange
parameters=$parameters
priority=$priority
repeat=$repeat
rerundependency=$rerundependency
forcererun=$forcererun
saveoutputoption=$saveoutputoption
trackingmethod=$trackingmethod
waitOperator=$waitOperator
workingdirectory=$workingdirectory
runuserid=$runuserid
notes=$notes
concurrencytype=$concurrencytype
tags=$tags
sharedownerids=$sharedownerids
sharedowners=$sharedowners
terminateparentonerrorflag=$terminateparentonerrorflag
terminateparentonabnormalflag=$terminateparentonabnormalflag
terminateparentonabortflag=$terminateparentonabortflag
onterminatereqignoreflag=$onterminatereqignoreflag
onterminatereqabortactiveflag=$onterminatereqabortactiveflag
onterminatereqterminateparentflag=$onterminatereqterminateparentflag
unixprofile=$unixprofile
transactionid=$transactionid
data=$data}
Write-Host "Completed Appending row in JobExtract for $ExcelTitle"
return $arrayitem
}

function PrepareDependencyExcel($DependencyExcelTitle,$DEPENDENCYFLAG){
Write-Host "Started Appending row in Dependency Excel for the title $DependencyExcelTitle and flag $DEPENDENCYFLAG "
#if(Test-Path .\TidalAutomation\UpdateJobDependency\$DependencyExcelTitle.xml)
if($DEPENDENCYFLAG="True" -AND (Test-Path C:\Users\AL91261\TidalAutomation\JobDependencySource\$DependencyExcelTitle.xml))
{
Write-Host "entered into True flage for $DependencyExcelTitle"
#[xml]$Dependencyxmltag=Get-Content -Path .\TidalAutomation\UpdateJobDependency\$DependencyExcelTitle.xml -Raw
#$Dependencyxmltag=[xml]([System.IO.File]::ReadAllText(".\TidalAutomation\UpdateJobDependency\$DependencyExcelTitle.xml"))
$Dependencyxmltag=[xml]([System.IO.File]::ReadAllText("C:\Users\AL91261\TidalAutomation\JobDependencySource\$DependencyExcelTitle.xml"))
$id=$Dependencyxmltag.GetElementsByTagName("tes:id").InnerXml
$jobid=$Dependencyxmltag.GetElementsByTagName("tes:jobid").InnerXml
$jobname=$Dependencyxmltag.GetElementsByTagName("tes:jobname").InnerXml
$type=$Dependencyxmltag.GetElementsByTagName("tes:type").InnerXml
$depjobtype=$Dependencyxmltag.GetElementsByTagName("tes:depjobtype").InnerXml
$depjobid=$Dependencyxmltag.GetElementsByTagName("tes:depjobid").InnerXml
$depjobname=$Dependencyxmltag.GetElementsByTagName("tes:depjobname").InnerXml
$depjobparent=$Dependencyxmltag.GetElementsByTagName("tes:depjobparent").InnerXml
$depjobserviceid=$Dependencyxmltag.GetElementsByTagName("tes:depjobserviceid").InnerXml
$operator=$Dependencyxmltag.GetElementsByTagName("tes:operator").InnerXml
$status=$Dependencyxmltag.GetElementsByTagName("tes:status").InnerXml
$logic=$Dependencyxmltag.GetElementsByTagName("tes:logic").InnerXml
$ingroup=$Dependencyxmltag.GetElementsByTagName("tes:ingroup").InnerXml
$ignoredep=$Dependencyxmltag.GetElementsByTagName("tes:ignoredep").InnerXml
$variable_id=$Dependencyxmltag.GetElementsByTagName("tes:variable_id").InnerXml
$keepmetifready=$Dependencyxmltag.GetElementsByTagName("tes:keepmetifready").InnerXml
$lastchangetime=$Dependencyxmltag.GetElementsByTagName("tes:lastchangetime").InnerXml
$lastusermodifiedtime=$Dependencyxmltag.GetElementsByTagName("tes:lastusermodifiedtime").InnerXml
$inheritedagentname=$Dependencyxmltag.GetElementsByTagName("tes:inheritedagentname").InnerXml
$ownerid=$Dependencyxmltag.GetElementsByTagName("tes:ownerid").InnerXml
$variableid=$Dependencyxmltag.GetElementsByTagName("tes:variableid").InnerXml
$varownerid=$Dependencyxmltag.GetElementsByTagName("tes:varownerid").InnerXml
$jobconnectionid=$Dependencyxmltag.GetElementsByTagName("tes:jobconnectionid").InnerXml
$occurrence=$Dependencyxmltag.GetElementsByTagName("tes:occurrence").InnerXml
$Dependencyarrayitem=[PSCustomObject]@{
id	=	$id
jobid	=	$jobid
jobname	=	$jobname
type	=	$type
depjobtype	=	$depjobtype
depjobid	=	$depjobid
depjobname	=	$depjobname
depjobparent	=	$depjobparent
depjobserviceid	=	$depjobserviceid
operator	=	$operator
status	=	$status
logic	=	$logic
ingroup	=	$ingroup
ignoredep	=	$ignoredep
variable_id	=	$variable_id
keepmetifready	=	$keepmetifready
lastchangetime	=	$lastchangetime
lastusermodifiedtime	=	$lastusermodifiedtime
inheritedagentname	=	$inheritedagentname
ownerid	=	$ownerid
variableid	=	$variableid
varownerid	=	$varownerid
jobconnectionid	=	$jobconnectionid
occurrence	=	$occurrence
}
}
elseif($DEPENDENCYFLAG="False")
{
#[xml]$Dependencyxmltag=Get-Content -Path .\TidalAutomation\UpdateJobDependency\$DependencyExcelTitle.xml -Raw
#$Dependencyxmltag=[xml]([System.IO.File]::ReadAllText(".\TidalAutomation\UpdateJobDependency\$DependencyExcelTitle.xml"))
Write-Host "entered into false flage for $DependencyExcelTitle"
$Dependencyxmltag=[xml]([System.IO.File]::ReadAllText("C:\Users\AL91261\TidalAutomation\JobDefinitionSource\$DependencyExcelTitle.xml"))
$jobid=$Dependencyxmltag.GetElementsByTagName("tes:id").InnerXml
$jobname=$Dependencyxmltag.GetElementsByTagName("tes:name").InnerXml
$Dependencyarrayitem=[PSCustomObject]@{
id	=	""
jobid	=	$jobid
jobname	=	$jobname
type	=	""
depjobtype	=	""
depjobid	=	""
depjobname	=	"No_dependencies"
depjobparent	=	""
depjobserviceid	=	""
operator	=	""
status	=	""
logic	=	"no_logic"
ingroup	=	""
ignoredep	=	""
variable_id	=	""
keepmetifready	=	""
lastchangetime	=	""
lastusermodifiedtime	=	""
inheritedagentname	=	""
ownerid	=	""
variableid	=	""
varownerid	=	""
jobconnectionid	=	""
occurrence	=	""
}
}
Write-Host "Completed Appending row in Dependency Excel for $DependencyExcelTitle"
return $Dependencyarrayitem
}

function PrepareFileDependencyExcel($DependencyExcelTitle,$DEPENDENCYFLAG){
Write-Host "Started Appending row in FileDependency Excel for $DependencyExcelTitle"
#if(Test-Path .\TidalAutomation\UpdateFileDependency\$DependencyExcelTitle.xml)
if($DEPENDENCYFLAG="True" -and (Test-Path C:\Users\AL91261\TidalAutomation\FileDependencySource\$DependencyExcelTitle.xml))
{
#[xml]$Dependencyxmltag=Get-Content -Path .\TidalAutomation\UpdateFileDependency\$DependencyExcelTitle.xml -Raw
#$Dependencyxmltag=[xml]([System.IO.File]::ReadAllText(".\TidalAutomation\UpdateFileDependency\$DependencyExcelTitle.xml"))
$Dependencyxmltag=[xml]([System.IO.File]::ReadAllText("C:\Users\AL91261\TidalAutomation\FileDependencySource\$DependencyExcelTitle.xml"))
$id=$Dependencyxmltag.GetElementsByTagName("tes:id").InnerXml
$jobid=$Dependencyxmltag.GetElementsByTagName("tes:jobid").InnerXml
$jobname=$Dependencyxmltag.GetElementsByTagName("tes:jobname").InnerXml
$type=$Dependencyxmltag.GetElementsByTagName("tes:type").InnerXml
$depjobtype=$Dependencyxmltag.GetElementsByTagName("tes:depjobtype").InnerXml
$depjobid=$Dependencyxmltag.GetElementsByTagName("tes:depjobid").InnerXml
$depjobserviceid=$Dependencyxmltag.GetElementsByTagName("tes:depjobserviceid").InnerXml
$operator=$Dependencyxmltag.GetElementsByTagName("tes:operator").InnerXml
$status=$Dependencyxmltag.GetElementsByTagName("tes:status").InnerXml
$filename=$Dependencyxmltag.GetElementsByTagName("tes:filename").InnerXml
$filetype=$Dependencyxmltag.GetElementsByTagName("tes:filetype").InnerXml
$fileextent=$Dependencyxmltag.GetElementsByTagName("tes:fileextent").InnerXml
$variable_id=$Dependencyxmltag.GetElementsByTagName("tes:variable_id").InnerXml
$lastchangetime=$Dependencyxmltag.GetElementsByTagName("tes:lastchangetime").InnerXml
$lastusermodifiedtime=$Dependencyxmltag.GetElementsByTagName("tes:lastusermodifiedtime").InnerXml
$nodeid=$Dependencyxmltag.GetElementsByTagName("tes:nodeid").InnerXml
$ownerid=$Dependencyxmltag.GetElementsByTagName("tes:ownerid").InnerXml
$variableid=$Dependencyxmltag.GetElementsByTagName("tes:variableid").InnerXml
$varownerid=$Dependencyxmltag.GetElementsByTagName("tes:varownerid").InnerXml
$connectionid=$Dependencyxmltag.GetElementsByTagName("tes:connectionid").InnerXml
$connectionname=$Dependencyxmltag.GetElementsByTagName("tes:connectionname").InnerXml
$jobconnectionid=$Dependencyxmltag.GetElementsByTagName("tes:jobconnectionid").InnerXml
$condition=$Dependencyxmltag.GetElementsByTagName("tes:condition").InnerXml
$Dependencyarrayitem=[PSCustomObject]@{
id=$id
jobid=$jobid
jobname=$jobname
type=$type
depjobtype=$depjobtype
depjobid=$depjobid
depjobserviceid=$depjobserviceid
operator=$operator
status=$status
filename=$filename
filetype=$filetype
fileextent=$fileextent
variable_id=$variable_id
lastchangetime=$lastchangetime
lastusermodifiedtime=$lastusermodifiedtime
nodeid=$nodeid
ownerid=$ownerid
variableid=$variableid
varownerid=$varownerid
connectionid=$connectionid
connectionname=$connectionname
jobconnectionid=$jobconnectionid
condition=$condition
}
}

elseif($DEPENDENCYFLAG="False")
{
#[xml]$Dependencyxmltag=Get-Content -Path .\TidalAutomation\UpdateJobDependency\$DependencyExcelTitle.xml -Raw
#$Dependencyxmltag=[xml]([System.IO.File]::ReadAllText(".\TidalAutomation\UpdateJobDependency\$DependencyExcelTitle.xml"))
$Dependencyxmltag=[xml]([System.IO.File]::ReadAllText("C:\Users\AL91261\TidalAutomation\JobDefinitionSource\$DependencyExcelTitle.xml"))
$jobid=$Dependencyxmltag.GetElementsByTagName("tes:id").InnerXml
$jobname=$Dependencyxmltag.GetElementsByTagName("tes:name").InnerXml
$Dependencyarrayitem=[PSCustomObject]@{
id	=	""
jobid	=	$jobid
jobname	=	$jobname
type=""
depjobtype=""
depjobid=""
depjobserviceid=""
operator=""
status=""
filename=""
filetype=""
fileextent=""
variable_id=""
lastchangetime=""
lastusermodifiedtime=""
nodeid=""
ownerid=""
variableid=""
varownerid=""
connectionid=""
connectionname=""
jobconnectionid=""
condition=""
}
}

Write-Host "Completed Appending row in FileDependency Excel for $DependencyExcelTitle"
return $Dependencyarrayitem
}

TRY
{
$FolderLevel=$GFolderLevel
$APMNUMBER=$GAPMNUMBER
$pattern=$Gpattern
$Environment=$GEnvironment
$ExtractFilename=$APMNUMBER+"_"+$Environment+"_"+$FolderLevel
$JobGroupLevel=$null #
$Grouptitle=$null #"CPC087A_1D1000909_CPEC_MEDICARE_FILE_PUBLISH"#"DOC011_2D1002310_MACESS_MEMBER_COMMUNICATION_VENDOR_LOAD"#"CPC010A_1D1000909_CPEC_XOVR_CLAIMS_CREATION"#$null#"CPC010A_0010_CPEC_XOVR_CLAIMS_LOAD"
$JobLevel=$null#"25485" #"37091"#$null#"18237"
$JobTitle=$null#"CPC990A_0010_PMP_UI_Check" #"jerushautomationtesting"#$null#"CPC010A_0010_CPEC_XOVR_CLAIMS_LOAD"#""
$array= @()
$Dependencyarray= @()
$FileDependencyarray= @()

if($FolderLevel -ne $null)
{
Write-Host "Entered into Folder Level Code"
Cleanup
Write-Host "Started XML Extraction and Manipulation Process for the JobGroups Under Folder ID:$FolderLevel"
Write-Host "Started Extraction of JobGroups_ID Under Folder_ID:$FolderLevel"  
$JobGroups=Invoke-JobGetIDs $FolderLevel
if($JobGroups.id){
foreach($JobGroup in $JobGroups)
{
$JobGroupLevel=$JobGroup.id
$Grouptitle=$JobGroup.title
Write-Host $JobGroupLevel
#set1 Azure
#if ($Grouptitle -in("CPC0798_3D1000909_SPS_TEMPHOLD_REPORT","CPC0799_1D1000909_SPS_DATA_LOAD","CPC0804_1D1000909_STG_USUS_ID_LOAD","CPC010A_1D1000909_CPEC_XOVR_CLAIMS_CREATION","CPC010B_1W1000909_CPEC_XOVR_CLAIMS_CREATION","CPC010B_1W1000909_CPEC_XOVR_CLAIMS_CREATION","CPC007D_1D1000909_CD_PAYDISB_EXTRACT","CPC007R_1D1000909_CD_PAYDISB_EXTRACT","CPC0009_1D1000909_CD_PAYDISB_MPC_EXTRACT","CPC087A_1D1000909_CPEC_MEDICARE_FILE_PUBLISH","CPC087B_1D1000909_CPEC_MEDICAID_FILE_PUBLISH","CPC087M_1D1000909_CPEC_MPC_FILE_PUBLISH","CPC0008_1D1000909_BATCH_JOB_ALERT","CPC0015_2D1000909_PENALTY_AMOUNT","CPC0161_3D1000909_DMS_MPC_RETURN","CPC0162_3M1000909_ITS_MEDSUP_MONTHLY_INTEREST","CPC0163_3M1000909_MSUPP_ITS_RTN_MONTHLY_AUDIT","CPC0911_3M1000909_ITS_MONTHLY_INTEREST","CPC0956_3M1000909_ITS_MONTHLY_INTEREST_AUDIT","CPC956A_1M1000909_ITS_Blue2","CPC956B_3M1000909_ITS_Blue2","CPC956C_1M1000909_ITS_Blue2"))
#set1 On-prem
#if ($Grouptitle -in("FSE477A_2A1001390_EPAS_REPORTING_STATUS_10_5_2","FSE477B_2A1001390_EPAS_REPORTING_UNFINALIZE_10_5_2","FSE477C_2A1001390_EPAS_REPORTING_FINALIZE_CAP_10_5_2","FSE477D_2A1001390_EPAS_REPORTING_FINALIZE_BILL_10_5_2","FSE477E_2A1001390_EPAS_REPORTING_UNAPPROVAL_10_5_2","FSE477F_2A1001390_EPAS_REPORTING_APPROVAL_10_5_2","FSE477G_2A1001390_EPAS_REPORTING_MASTER_TABLES_LOAD_10_5_2","FSE480_2D1018125_EPAS_DATAMART_LOAD_10_5_2","FSE481_2D1018125_EPAS_DATAMART_STATUS_10_5_2","FSE991_3A1001390_Migrate_Account_Analysis","FSE992_3A1001390_Phoenix_SQL_UPDATE","FSE995_3D1001390_EPAS_Phoenix_Migrate_Config"))
if ($Grouptitle -like $pattern )
#if ($Grouptitle -in("DOC003_1D00_MACESS_UNZIP_UTILITY","DOC008_2D00_MACESS_FILE_DELIVERY","DOC012_3D00_MACESS_CHART_ACQUISITION_VENDORS","DOC015_2D00_MACESS_NC_MEDICAID","DOC017_2D00_MACESS_PEP_OOA_INTEGRATION","DOC018_3D00_MACESS_TN_IDD","DOC019_2D00_MACESS_LETTERS","DOC021_2D00_MACESS_VENDOR_EXPORT","DOC025_1D00_MACESS_RIGHTFAX_IMPORT","DOC027_3H00_MACESS_MOVE_DONE","DOC028_2D00_MACESS_MOVE_TODO","DOC032_2D00_MACESS_IMAGE_IMPORT","DOC033_1D00_MACESS_HEALTH_HOME_JOBS","DOC046_2D00_MACESS_UNZIP_VENDOR","DOC049_2D00_MACESS_AGP_LETTER_GEN","DOC053_2D00_MACESS_CORRO_SEND_PSD","DOC054_2D00_MACESS_PDQSF_SEND_TO_WORKFLOW","DOC057_2D00_MACESS_RIGHTFAX_OUTBOUND","DOC071_1D00_MACESS_SPLITMETA_UTILITY","DOC084_1D00_MACESS_CQFLUENCY_TRANSLATION_PROCESS","DOC085_1D00_MACESS_CONDUENT_SCANFILE_LOAD","DOC086_1D00_MACESS_ENOTIFY_DOCUMENT_IMPORT","DOC087_2D00_MACESS_MEMBERINTERACTION_LETTERS_PUBLISH","DOC089_1D00_MACESS_ROUTING","DOC999_3D00_MACESS_DAILY_OPERATIONAL_TASKS","DOC029_2D00_MACESS_COMPASS_MOVE_TODO","DOC066_1D00_MACESS_VENDOR_AVAILITY_AUTH_IMPORT","DOC068_1D00_MACESS_VENDOR_AVAILITY_IMPORT","DOC023_3D00_MACESS_IMPORT_FILES","DOC030_3D00_UNFILE_UNKNOWN_MEMBER_UM_AUTHS","DOC031_2D00_MEDCHARTS_POPULATE_CHART_RETRIEVAL","DOC035_1D00_MACESS_VENDOR_CORR_IMPORT","DOC036_2D00_MACESS_IMPORT_EOBS","DOC038_1D00_MACESS_DOCUMENT_TRIAGE_EXPORT_TRAINING_ONLY","DOC042_2D00_MACESS_LETTERS_DELEGATED_RISK_SSIS2012","DOC043_2D00_MACESS_LETTERS_GNYHA","DOC044_2D00_MACESS_CHART_ACQUISITION_LEGACY_LOAD","DOC045_2D00_MACESS_DOCUMENT_TRIAGE_FILE_INFORMATION","DOC047_2D00_MACESS_MEDICARE_REQUEST_LETTERS","DOC048_1D00_MACESS_VENDOR_ACK","DOC050_2D00_MACESS_CREDENTIALING_AUTOCOMPLETE","DOC051_2D00_MACESS_DPS_DCC_RECON_FILE","DOC052_2D00_MACESS_EDELIVERY_ENROLLMENT_LETTERS","DOC055_3D00_MACESS_SSISLOG","DOC059_2A00_MACESS_DRT_TEMPLATE_UPDATES","DOC060_2A00_MACESS_DRT_FORM_UPDATES","DOC062_1D00_AIM_BATCH_LETTER","DOC063_2D00_MACESS_SEND_CONTRACTS_TO_ICN","DOC064_2D00_ADD_DOCUMENTNOTES_OUTREACHLETTERS","DOC067_1D00_MACESS_REDISTRIBUTE_FAILED_DOCUMENTS","DOC069_2D00_MACESS_MYNEXUS_CORR_IMPORT","DOC072_2A00_JOB_DELETE_ADD_DOCUMENT_NOTES","DOC074_2D00_PSD_ERROR_CLEANUP","DOC075_2D00_MACESS_TTRY_LETTERS","DOC076_1D00_BEACONVAM_LETTERS","DOC077_2D00_Macess_CRAV_Integration","DOC078_3D00_MACESS_SMART_INTAKE_MONITORING","DOC080_2D00_MACESS_VAM_VUM_USER_LISTING","DOC082_2D00_MACESS_CASEMANAGEMENTAPP_HRA_IMPORT_ACK","DOC083_2D00_WFEXTRACT","DOC088_1D00_BEACONVAM_LETTERS_CTL_FILE_WATCHER","DOC099_1D00_DOC_EXPORT_PROCESSING","DOC203_1H00_KOFAX_SEND_CORRESPONDENCE_TO_VENDOR","DOC002_2D00_MACESS_PROVIDER_FOLDERS","DOC005_3D00_MACESS_DOCUMENT_RETENTION","DOC006_2D00_MACESS_QUEUE_INVENTORY_SNAPSHOTS","DOC022_1D00_MACESS_TO_PHARMACY_FAX_SEND","DOC001_2D00_MACESS_MEMBER_FOLDERS","DOC011_2D00_MACESS_MEMBER_COMMUNICATION_VENDOR_LOAD","DOC014_1D00_MACESS_SMART_INTAKE","DOC073_2D00_MACESS_SERVERTEMP_CLEANUP"
#))
{
Write-Host "Started XML Extraction and Manipulation Process for the Job Under JobGroup ID:$JobGroupLevel"
Write-Host "Started Extraction of Job Under JobGroup ID:$JobGroupLevel" 
$array +=JobDefinition $JobGroupLevel  $Grouptitle 
$Dependencyarray +=DependencyDefinition $JobGroupLevel  $Grouptitle
$FileDependencyarray +=FileDependencyDefinition $JobGroupLevel  $Grouptitle
$Jobs=Invoke-JobGetIDs $JobGroupLevel 
if($Jobs.id)
{
Write-Host "if block code"
foreach($Job in $Jobs)
{
Write-Host "Started Extraction of Job_Definition for Job ID:$($Job.id) and Title:$($Job.title)"
$array +=JobDefinition $Job.id $Job.title
$Dependencyarray +=DependencyDefinition $Job.id $Job.title
$FileDependencyarray +=FileDependencyDefinition $Job.id $Job.title
Write-Host "Completed Extraction of Job_Definition for Job ID:$($Job.id) and Title:$($Job.title)"
}
}
else
{
Write-Host "else block code"
foreach($Job in $Jobs.entry)
{
Write-Host "Started Extraction of Job_Definition for Job ID:$($Job.id) and Title:$($Job.title)"
$array +=JobDefinition $Job.id $Job.title
$Dependencyarray +=DependencyDefinition $Job.id $Job.title
$FileDependencyarray +=FileDependencyDefinition $Job.id $Job.title
Write-Host "Completed Extraction of Job_Definition for Job ID:$($Job.id) and Title:$($Job.title)"
}
}
}
else
{Write-Host " Job Group name : $Grouptitle Not matching the Pattern" }

}
}

else{
foreach($JobGroup in $JobGroups.entry)
{
$JobGroupLevel=$JobGroup.id
$Grouptitle=$JobGroup.title
Write-Host $JobGroupLevel
#set1 Azure
#if ($Grouptitle -in("CPC0798_3D1000909_SPS_TEMPHOLD_REPORT","CPC0799_1D1000909_SPS_DATA_LOAD","CPC0804_1D1000909_STG_USUS_ID_LOAD","CPC010A_1D1000909_CPEC_XOVR_CLAIMS_CREATION","CPC010B_1W1000909_CPEC_XOVR_CLAIMS_CREATION","CPC010B_1W1000909_CPEC_XOVR_CLAIMS_CREATION","CPC007D_1D1000909_CD_PAYDISB_EXTRACT","CPC007R_1D1000909_CD_PAYDISB_EXTRACT","CPC0009_1D1000909_CD_PAYDISB_MPC_EXTRACT","CPC087A_1D1000909_CPEC_MEDICARE_FILE_PUBLISH","CPC087B_1D1000909_CPEC_MEDICAID_FILE_PUBLISH","CPC087M_1D1000909_CPEC_MPC_FILE_PUBLISH","CPC0008_1D1000909_BATCH_JOB_ALERT","CPC0015_2D1000909_PENALTY_AMOUNT","CPC0161_3D1000909_DMS_MPC_RETURN","CPC0162_3M1000909_ITS_MEDSUP_MONTHLY_INTEREST","CPC0163_3M1000909_MSUPP_ITS_RTN_MONTHLY_AUDIT","CPC0911_3M1000909_ITS_MONTHLY_INTEREST","CPC0956_3M1000909_ITS_MONTHLY_INTEREST_AUDIT","CPC956A_1M1000909_ITS_Blue2","CPC956B_3M1000909_ITS_Blue2","CPC956C_1M1000909_ITS_Blue2"))
#set1 On-prem
#if ($Grouptitle -in("MER0200_3D00_UMAU_PRE","MER0201_3D00_UMAU_POST","MER0200_3D00_UMAU_PRE","MER0210_2M00_GA_PRIOR_AUTHS","MER0698_3D00_UMAU_UNZIP_FILES","MER610A_1D00_GA_GMCF_INCOMING","MER610B_2D00_GA_GMCF_ATTACH","MER622A_2D00_GA_GMCF_OUTGOING_ATTACH","MER698A_3D00_UMAU_NC_UNZIP_FILES"))
if ($Grouptitle -like $pattern )
#if ($Grouptitle -in("DOC003_1D00_MACESS_UNZIP_UTILITY","DOC008_2D00_MACESS_FILE_DELIVERY","DOC012_3D00_MACESS_CHART_ACQUISITION_VENDORS","DOC015_2D00_MACESS_NC_MEDICAID","DOC017_2D00_MACESS_PEP_OOA_INTEGRATION","DOC018_3D00_MACESS_TN_IDD","DOC019_2D00_MACESS_LETTERS","DOC021_2D00_MACESS_VENDOR_EXPORT","DOC025_1D00_MACESS_RIGHTFAX_IMPORT","DOC027_3H00_MACESS_MOVE_DONE","DOC028_2D00_MACESS_MOVE_TODO","DOC032_2D00_MACESS_IMAGE_IMPORT","DOC033_1D00_MACESS_HEALTH_HOME_JOBS","DOC046_2D00_MACESS_UNZIP_VENDOR","DOC049_2D00_MACESS_AGP_LETTER_GEN","DOC053_2D00_MACESS_CORRO_SEND_PSD","DOC054_2D00_MACESS_PDQSF_SEND_TO_WORKFLOW","DOC057_2D00_MACESS_RIGHTFAX_OUTBOUND","DOC071_1D00_MACESS_SPLITMETA_UTILITY","DOC084_1D00_MACESS_CQFLUENCY_TRANSLATION_PROCESS","DOC085_1D00_MACESS_CONDUENT_SCANFILE_LOAD","DOC086_1D00_MACESS_ENOTIFY_DOCUMENT_IMPORT","DOC087_2D00_MACESS_MEMBERINTERACTION_LETTERS_PUBLISH","DOC089_1D00_MACESS_ROUTING","DOC999_3D00_MACESS_DAILY_OPERATIONAL_TASKS","DOC029_2D00_MACESS_COMPASS_MOVE_TODO","DOC066_1D00_MACESS_VENDOR_AVAILITY_AUTH_IMPORT","DOC068_1D00_MACESS_VENDOR_AVAILITY_IMPORT","DOC023_3D00_MACESS_IMPORT_FILES","DOC030_3D00_UNFILE_UNKNOWN_MEMBER_UM_AUTHS","DOC031_2D00_MEDCHARTS_POPULATE_CHART_RETRIEVAL","DOC035_1D00_MACESS_VENDOR_CORR_IMPORT","DOC036_2D00_MACESS_IMPORT_EOBS","DOC038_1D00_MACESS_DOCUMENT_TRIAGE_EXPORT_TRAINING_ONLY","DOC042_2D00_MACESS_LETTERS_DELEGATED_RISK_SSIS2012","DOC043_2D00_MACESS_LETTERS_GNYHA","DOC044_2D00_MACESS_CHART_ACQUISITION_LEGACY_LOAD","DOC045_2D00_MACESS_DOCUMENT_TRIAGE_FILE_INFORMATION","DOC047_2D00_MACESS_MEDICARE_REQUEST_LETTERS","DOC048_1D00_MACESS_VENDOR_ACK","DOC050_2D00_MACESS_CREDENTIALING_AUTOCOMPLETE","DOC051_2D00_MACESS_DPS_DCC_RECON_FILE","DOC052_2D00_MACESS_EDELIVERY_ENROLLMENT_LETTERS","DOC055_3D00_MACESS_SSISLOG","DOC059_2A00_MACESS_DRT_TEMPLATE_UPDATES","DOC060_2A00_MACESS_DRT_FORM_UPDATES","DOC062_1D00_AIM_BATCH_LETTER","DOC063_2D00_MACESS_SEND_CONTRACTS_TO_ICN","DOC064_2D00_ADD_DOCUMENTNOTES_OUTREACHLETTERS","DOC067_1D00_MACESS_REDISTRIBUTE_FAILED_DOCUMENTS","DOC069_2D00_MACESS_MYNEXUS_CORR_IMPORT","DOC072_2A00_JOB_DELETE_ADD_DOCUMENT_NOTES","DOC074_2D00_PSD_ERROR_CLEANUP","DOC075_2D00_MACESS_TTRY_LETTERS","DOC076_1D00_BEACONVAM_LETTERS","DOC077_2D00_Macess_CRAV_Integration","DOC078_3D00_MACESS_SMART_INTAKE_MONITORING","DOC080_2D00_MACESS_VAM_VUM_USER_LISTING","DOC082_2D00_MACESS_CASEMANAGEMENTAPP_HRA_IMPORT_ACK","DOC083_2D00_WFEXTRACT","DOC088_1D00_BEACONVAM_LETTERS_CTL_FILE_WATCHER","DOC099_1D00_DOC_EXPORT_PROCESSING","DOC203_1H00_KOFAX_SEND_CORRESPONDENCE_TO_VENDOR","DOC002_2D00_MACESS_PROVIDER_FOLDERS","DOC005_3D00_MACESS_DOCUMENT_RETENTION","DOC006_2D00_MACESS_QUEUE_INVENTORY_SNAPSHOTS","DOC022_1D00_MACESS_TO_PHARMACY_FAX_SEND","DOC001_2D00_MACESS_MEMBER_FOLDERS","DOC011_2D00_MACESS_MEMBER_COMMUNICATION_VENDOR_LOAD","DOC014_1D00_MACESS_SMART_INTAKE","DOC073_2D00_MACESS_SERVERTEMP_CLEANUP"
#))
{
Write-Host "Started XML Extraction and Manipulation Process for the Job Under JobGroup ID:$JobGroupLevel"
Write-Host "Started Extraction of Job Under JobGroup ID:$JobGroupLevel" 
$array +=JobDefinition $JobGroupLevel  $Grouptitle
$Dependencyarray +=DependencyDefinition $JobGroupLevel  $Grouptitle
$FileDependencyarray +=FileDependencyDefinition $JobGroupLevel  $Grouptitle
$Jobs=Invoke-JobGetIDs $JobGroupLevel 
if($Jobs.id)
{
Write-Host "if block code"
foreach($Job in $Jobs)
{
Write-Host "Started Extraction of Job_Definition for Job ID:$($Job.id) and Title:$($Job.title)"
$array +=JobDefinition $Job.id $Job.title
$Dependencyarray +=DependencyDefinition $Job.id $Job.title
$FileDependencyarray +=FileDependencyDefinition $Job.id $Job.title
Write-Host "Completed Extraction of Job_Definition for Job ID:$($Job.id) and Title:$($Job.title)"
}
}
else
{
Write-Host "else block code"
foreach($Job in $Jobs.entry)
{
Write-Host "Started Extraction of Job_Definition for Job ID:$($Job.id) and Title:$($Job.title)"
$array +=JobDefinition $Job.id $Job.title
$Dependencyarray +=DependencyDefinition $Job.id $Job.title
$FileDependencyarray +=FileDependencyDefinition $Job.id $Job.title
Write-Host "Completed Extraction of Job_Definition for Job ID:$($Job.id) and Title:$($Job.title)"
}
}
}
else
{Write-Host " Job Group name : $Grouptitle Not matching the Pattern" }

}
}

Write-Host "Export_excel Started"
#$array | Export-Excel -Path "C:\Users\AL91261\TidalAutomation\MappingExcel\JobExtract_$FolderLevel.xlsx" -AutoSize -Numberformat "@"

#Variable_Extraction-Start
$array|Select-Object id,type,typename,name,parentid,parentname,effectiveagentid,effectiveagentlistid,agentname,extendedinfo,runtimeusername,command,parameters,inheritagent,fullpath,active,lastusermodifiedtime,workingdirectory | Export-Excel -Path "C:\Users\AL91261\TidalAutomation\VariableExtract\UpdateJobExtract_$FolderLevel.xlsx" -AutoSize -TableStyle Medium2 -Numberformat "@" 
$Dependencyarray | Export-Excel -Path "C:\Users\AL91261\TidalAutomation\VariableExtract\DependencyExtract_$FolderLevel.xlsx" -AutoSize -Numberformat "@"
$FileDependencyarray | Export-Excel -Path "C:\Users\AL91261\TidalAutomation\VariableExtract\FileDependencyExtract_$FolderLevel.xlsx" -AutoSize -Numberformat "@"
#Variable_Extraction-End
Write-Host "Copying Template Started"
Copy-Item "C:\Users\AL91261\TidalAutomation\PowerShellscripts\Template.xlsx" -Destination "C:\Users\AL91261\TidalAutomation\MappingExcel\$ExtractFilename.xlsx"
Write-Host "Copying Template Completed"
$array|Select-Object id,type,typename,name,parentid,parentname,effectiveagentid,effectiveagentlistid,agentname,extendedinfo,runtimeusername,command,parameters,inheritagent,fullpath,active,lastusermodifiedtime,workingdirectory | Export-Excel -Path "C:\Users\AL91261\TidalAutomation\MappingExcel\$ExtractFilename.xlsx" -WorksheetName "JobExtract" -CellStyleSB{ param($worksheet) 
$usedrange = $worksheet.Dimension.Address
$range=$worksheet.Cells[$usedrange]
$range.Style.WrapText=$true} -AutoSize -TableStyle Medium2 -Numberformat "@" 
$Dependencyarray | Export-Excel -Path "C:\Users\AL91261\TidalAutomation\MappingExcel\$ExtractFilename.xlsx" -WorksheetName "DependencyExtract" -AutoSize -TableStyle Medium2 -Numberformat "@"
$FileDependencyarray | Export-Excel -Path "C:\Users\AL91261\TidalAutomation\MappingExcel\$ExtractFilename.xlsx" -WorksheetName "FileDependencyExtract" -AutoSize -TableStyle Medium2 -Numberformat "@"
Write-Host "Export_excel Completed"
Write-Host "Completed XML Extraction and Manipulation Process for the Job Under JobGroup ID:$FolderLevel"
Write-Host "Exited from Folder Level Code"
}

elseif($JobGroupLevel -ne $null -and $Grouptitle -ne $null)
{
Write-Host "Entered into JobGroup Level Code"
Cleanup
Write-Host "Started XML Extraction and Manipulation Process for the Job Under JobGroup ID:$JobGroupLevel"
Write-Host "Started Extraction of Job Under JobGroup ID:$JobGroupLevel" 
$array +=JobDefinition $JobGroupLevel  $Grouptitle
$Dependencyarray +=DependencyDefinition $JobGroupLevel  $Grouptitle
$FileDependencyarray +=FileDependencyDefinition $JobGroupLevel  $Grouptitle
$Jobs=Invoke-JobGetIDs $JobGroupLevel 
if($Jobs.id)
{
Write-Host "if block code"
foreach($Job in $Jobs)
{
Write-Host "Started Extraction of Job_Definition for Job ID:$($Job.id) and Title:$($Job.title)"
$array +=JobDefinition $Job.id $Job.title
$Dependencyarray +=DependencyDefinition $Job.id $Job.title
$FileDependencyarray +=FileDependencyDefinition $Job.id $Job.title
Write-Host "Completed Extraction of Job_Definition for Job ID:$($Job.id) and Title:$($Job.title)"
}
}
else
{
Write-Host "else block code"
foreach($Job in $Jobs.entry)
{
Write-Host "Started Extraction of Job_Definition for Job ID:$($Job.id) and Title:$($Job.title)"
$array +=JobDefinition $Job.id $Job.title
$Dependencyarray +=DependencyDefinition $Job.id $Job.title
$FileDependencyarray +=FileDependencyDefinition $Job.id $Job.title
Write-Host "Completed Extraction of Job_Definition for Job ID:$($Job.id) and Title:$($Job.title)"
}
}
Write-Host "Export_excel Started"
$array | Export-Excel -Path "C:\Users\AL91261\TidalAutomation\MappingExcel\JobExtract_$JobGroupLevel.xlsx" -AutoSize -Numberformat "@"
$array|Select-Object id,type,typename,name,parentid,parentname,effectiveagentid,effectiveagentlistid,agentname,extendedinfo,runtimeusername,command,parameters,inheritagent,fullpath,active,lastusermodifiedtime,workingdirectory | Export-Excel -Path "C:\Users\AL91261\TidalAutomation\MappingExcel\UpdateJobExtract_$JobGroupLevel.xlsx" -AutoSize -Numberformat "@"
$Dependencyarray | Export-Excel -Path "C:\Users\AL91261\TidalAutomation\MappingExcel\DependencyExtract_$JobGroupLevel.xlsx" -AutoSize -Numberformat "@"
$FileDependencyarray | Export-Excel -Path "C:\Users\AL91261\TidalAutomation\MappingExcel\FileDependencyExtract_$JobGroupLevel.xlsx" -AutoSize -Numberformat "@"
Write-Host "Export_excel Completed"
Write-Host "Completed XML Extraction and Manipulation Process for the Job Under JobGroup ID:$JobGroupLevel"
Write-Host "Exited from JobGroup Level Code"
}

elseif($JobLevel -ne $null -and $JobTitle -ne $null)
{
Write-Host "Entered into Job Level Code"
Cleanup
Write-Host "Started XML Extraction and Manipulation Process for the Job ID:$JobLevel"
Write-Host "Started Extraction of Job_Definition for Job ID:$JobLevel and Title:$JobTitle"
$array +=JobDefinition $JobLevel $JobTitle
#$Dependencyarray +=DependencyDefinition $JobLevel $JobTitle
#$FileDependencyarray +=FileDependencyDefinition $JobLevel $JobTitle

Write-Host "Completed Extraction of Job_Definition for Job ID:$JobLevel and Title:$JobTitle"
Write-Host "Export_excel Started"
$array | Export-Excel -Path "C:\Users\AL91261\TidalAutomation\MappingExcel\JobExtract_$JobLevel.xlsx" -AutoSize -Numberformat "@"
$array|Select-Object id,type,typename,name,parentid,parentname,effectiveagentid,effectiveagentlistid,agentname,extendedinfo,runtimeusername,command,parameters,inheritagent,fullpath,active,lastusermodifiedtime,workingdirectory | Export-Excel -Path "C:\Users\AL91261\TidalAutomation\MappingExcel\UpdateJobExtract_$JobLevel.xlsx" -AutoSize -Numberformat "@"
#$Dependencyarray | Export-Excel -Path "C:\Users\AL91261\TidalAutomation\MappingExcel\DependencyExtract_$JobLevel.xlsx" -AutoSize -Numberformat "@"
#$FileDependencyarray | Export-Excel -Path "C:\Users\AL91261\TidalAutomation\MappingExcel\FileDependencyExtract_$JobLevel.xlsx" -AutoSize -Numberformat "@"
Write-Host "Export_excel Completed"
Write-Host "Completed XML Extraction and Manipulation Process for the Job ID:$JobLevel"
Write-Host "Exited from Job Level Code"
$session = $null

}
}

CATCH
{   
$ErrorMessage = $_.Exception.Message
Write-Host $ErrorMessage
$session = $null
}
